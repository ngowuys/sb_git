var M=Object.defineProperty;var P=(e,t)=>{for(var o in t)M(e,o,{get:t[o],enumerable:!0})};var l=e=>{throw new Error("Not initialized yet")},g=typeof window>"u"&&typeof globalThis.WebSocketPair>"u";typeof Deno>"u"&&(self.Deno={args:[],build:{arch:"x86_64"},env:{get(){}}});var p=new Map,d=0;g&&(globalThis.syscall=async(e,...t)=>await new Promise((o,n)=>{d++,p.set(d,{resolve:o,reject:n}),l({type:"sys",id:d,name:e,args:t})}));function h(e,t,o){g&&(l=o,self.addEventListener("message",n=>{(async()=>{let s=n.data;switch(s.type){case"inv":{let u=e[s.name];if(!u)throw new Error(`Function not loaded: ${s.name}`);try{let c=await Promise.resolve(u(...s.args||[]));l({type:"invr",id:s.id,result:c})}catch(c){console.error("An exception was thrown as a result of invoking function",s.name,"error:",c.message),l({type:"invr",id:s.id,error:c.message})}}break;case"sysr":{let u=s.id,c=p.get(u);if(!c)throw Error("Invalid request id");p.delete(u),s.error?c.reject(new Error(s.error)):c.resolve(s.result)}break}})().catch(console.error)}),l({type:"manifest",manifest:t}))}function k(e){let t=atob(e),o=t.length,n=new Uint8Array(o);for(let s=0;s<o;s++)n[s]=t.charCodeAt(s);return n}function v(e){typeof e=="string"&&(e=new TextEncoder().encode(e));let t="",o=e.byteLength;for(let n=0;n<o;n++)t+=String.fromCharCode(e[n]);return btoa(t)}async function S(e,t){if(typeof e!="string"){let o=new Uint8Array(await e.arrayBuffer()),n=o.length>0?v(o):void 0;t={method:e.method,headers:Object.fromEntries(e.headers.entries()),base64Body:n},e=e.url}return syscall("sandboxFetch.fetch",e,t)}globalThis.nativeFetch=globalThis.fetch;function R(){globalThis.fetch=async function(e,t){let o=t&&t.body?v(new Uint8Array(await new Response(t.body).arrayBuffer())):void 0,n=await S(e,t&&{method:t.method,headers:t.headers,base64Body:o});return new Response(n.base64Body?k(n.base64Body):null,{status:n.status,headers:n.headers})}}g&&R();var a={};P(a,{confirm:()=>ce,copyToClipboard:()=>he,deleteLine:()=>ve,dispatch:()=>se,downloadFile:()=>H,filterBox:()=>X,flashNotification:()=>J,fold:()=>me,foldAll:()=>ge,getCurrentPage:()=>U,getCurrentPageMeta:()=>L,getCursor:()=>O,getSelection:()=>D,getText:()=>j,getUiOption:()=>ue,goHistory:()=>Y,hidePanel:()=>ee,insertAtCursor:()=>ie,insertAtPos:()=>te,moveCursor:()=>oe,moveCursorToLine:()=>ne,moveLineDown:()=>we,moveLineUp:()=>be,navigate:()=>_,newWindow:()=>$,openCommandPalette:()=>K,openPageNavigator:()=>N,openSearchPanel:()=>Pe,openUrl:()=>V,prompt:()=>ae,rebuildEditorState:()=>W,redo:()=>xe,reloadConfigAndCommands:()=>I,reloadPage:()=>Q,reloadUI:()=>B,replaceRange:()=>re,save:()=>q,setSelection:()=>G,setText:()=>E,setUiOption:()=>le,showPanel:()=>Z,toggleFold:()=>pe,undo:()=>ye,unfold:()=>de,unfoldAll:()=>fe,uploadFile:()=>z,vimEx:()=>Ce});typeof self>"u"&&(self={syscall:()=>{throw new Error("Not implemented here")}});function r(e,...t){return globalThis.syscall(e,...t)}function U(){return r("editor.getCurrentPage")}function L(){return r("editor.getCurrentPageMeta")}function j(){return r("editor.getText")}function E(e,t=!1){return r("editor.setText",e,t)}function O(){return r("editor.getCursor")}function D(){return r("editor.getSelection")}function G(e,t){return r("editor.setSelection",e,t)}function q(){return r("editor.save")}function _(e,t=!1,o=!1){return r("editor.navigate",e,t,o)}function N(e="page"){return r("editor.openPageNavigator",e)}function K(){return r("editor.openCommandPalette")}function Q(){return r("editor.reloadPage")}function B(){return r("editor.reloadUI")}function W(){return r("editor.rebuildEditorState")}function I(){return r("editor.reloadConfigAndCommands")}function V(e,t=!1){return r("editor.openUrl",e,t)}function $(){return r("editor.newWindow")}function Y(e){return r("editor.goHistory",e)}function H(e,t){return r("editor.downloadFile",e,t)}function z(e,t){return r("editor.uploadFile",e,t)}function J(e,t="info"){return r("editor.flashNotification",e,t)}function X(e,t,o="",n=""){return r("editor.filterBox",e,t,o,n)}function Z(e,t,o,n=""){return r("editor.showPanel",e,t,o,n)}function ee(e){return r("editor.hidePanel",e)}function te(e,t){return r("editor.insertAtPos",e,t)}function re(e,t,o){return r("editor.replaceRange",e,t,o)}function oe(e,t=!1){return r("editor.moveCursor",e,t)}function ne(e,t=1,o=!1){return r("editor.moveCursorToLine",e,t,o)}function ie(e,t=!1){return r("editor.insertAtCursor",e,t)}function se(e){return r("editor.dispatch",e)}function ae(e,t=""){return r("editor.prompt",e,t)}function ce(e){return r("editor.confirm",e)}function ue(e){return r("editor.getUiOption",e)}function le(e,t){return r("editor.setUiOption",e,t)}function me(){return r("editor.fold")}function de(){return r("editor.unfold")}function pe(){return r("editor.toggleFold")}function ge(){return r("editor.foldAll")}function fe(){return r("editor.unfoldAll")}function ye(){return r("editor.undo")}function xe(){return r("editor.redo")}function Pe(){return r("editor.openSearchPanel")}function he(e){return r("editor.copyToClipboard",e)}function ve(){return r("editor.deleteLine")}function be(){return r("editor.moveLineUp")}function we(){return r("editor.moveLineDown")}function Ce(e){return r("editor.vimEx",e)}var i={};P(i,{run:()=>Oe});function Oe(e,t){return r("shell.run",e,t)}var y=async()=>{await F()!=""&&(await f("Found existed Git setup, do you want to continue? This will delete old git config? (Yes/No)"),await We());let t=await m("Project URL:"),o=await m("Access token (For GitLab: username:access_token):"),n=await m("Your name:"),s=await m("Your email:");await f("Your content in git repo will overide current space, continue? (Yes/No)");let u=t.split("/");u[2]=`${o}@${u[2]}`;let c={url:u.join("/"),name:n,email:s};await Qe(c)},x=async()=>{console.log("Starting sync with git repo"),await Be(),console.log("Pulling change(s) from repo"),await i.run("git",["pull"]),console.log("Pushing change(s) to repo"),await i.run("git",["push"]),console.log("Done with sync task")},b=async()=>{let e=await a.prompt("Enter new token (For GitLab: username:access_token):");if(!e)return;let t=await F();if(t!=""){let o=t.split("/");o[2]=o[2].replace(/^.*@/,`${e}@`);let n=o.join("/");if(n.trim()==""){await a.flashNotification("Failed to replace token");return}console.log("Updating git remote"),await i.run("git",["remote","set-url","origin",n]),await a.flashNotification("Replaced token successfully!")}else return},w=async()=>{await f("Are you sure to continue? (Yes/No)"),console.log("Deleting old .git folder"),await i.run("rm",["-rf",".git"]),console.log("Trigger git clone"),await y()},C=async()=>{new Date().getMinutes()%5===0&&await x()},Qe=async e=>{await a.flashNotification("Cloning your git repo, it might take some time.");try{await i.run("git",["clone",e.url,"_sb_git"])}catch{console.error("Failed to clone repository, please check your details"),await a.flashNotification("Failed to clone repository, please check your details");return}console.log("Creating .gitignore file"),await i.run("echo",[".silverbullet.db*",">",".gitignore"]),await i.run("echo",["_plug/",">>",".gitignore"]),await i.run("echo",["Library/",">>",".gitignore"]),console.log("Moving repo content to space"),await i.run("bash",["-c","mv -f _sb_git/{.,}* . 2> /dev/null; true"]),await i.run("rm",["-rf","_sb_git"]),await i.run("git",["config","user.name",e.name]),await i.run("git",["config","user.email",e.email]),await a.flashNotification("Done. Now just wait for sync to kick in to get all the content.")},F=async()=>{await a.flashNotification("Checking git exists or not...");let e=(await i.run("git",["remote","get-url","origin"])).stdout.trim();return e==""?(console.error("Git repo does not exist, please make sure you have set it up"),await a.flashNotification("Git repo does not exist, please make sure you have set it up"),""):e},Be=async e=>{e||(e=`bot - auto commit ${Date.now()}`),console.log(`Commit your space to git with message: ${e}`),await i.run("git",["add","./*"]);try{await i.run("git",["commit","-a","-m",e])}catch{console.log("Failed to commit")}console.log("Done")},We=async()=>{console.log("Removing .git"),await i.run("rm",["-rf",".git"]),await a.flashNotification("Removed Git")},m=async e=>{let t=(await a.prompt(e))?.trim();return t||(console.log("User cancelled (no response)"),await a.flashNotification("User cancelled (no response)")),t||""},f=async e=>{let t=await m(e);if(!["yes","y"].includes(t.toLowerCase()))throw await a.flashNotification("User cancelled!"),new Error("User cancelled")};var A={gitCloneCmd:y,syncFromGitCmd:x,replaceTokenCmd:b,changeGitRepoCmd:w,scheduleCommitCmd:C},T={name:"sb_git",requiredPermissions:["shell"],functions:{gitCloneCmd:{path:"sb_git.ts:gitClone",command:{name:"Git: Setup git repository"}},syncFromGitCmd:{path:"sb_git.ts:sync",command:{name:"Git: Sync with git repository"}},replaceTokenCmd:{path:"sb_git.ts:replaceToken",command:{name:"Git: Replace token"}},changeGitRepoCmd:{path:"sb_git.ts:changeGitRepo",command:{name:"Git: Change git repo"}},scheduleCommitCmd:{path:"sb_git.ts:scheduleCommit",env:"server",cron:"* * * * *"}},assets:{}},Tt={manifest:T,functionMapping:A};h(A,T,self.postMessage);export{Tt as plug};
