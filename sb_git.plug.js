var M=Object.defineProperty;var x=(e,t)=>{for(var o in t)M(e,o,{get:t[o],enumerable:!0})};var l=e=>{throw new Error("Not initialized yet")},d=typeof window>"u"&&typeof globalThis.WebSocketPair>"u";typeof Deno>"u"&&(self.Deno={args:[],build:{arch:"x86_64"},env:{get(){}}});var p=new Map,m=0;d&&(globalThis.syscall=async(e,...t)=>await new Promise((o,n)=>{m++,p.set(m,{resolve:o,reject:n}),l({type:"sys",id:m,name:e,args:t})}));function P(e,t,o){d&&(l=o,self.addEventListener("message",n=>{(async()=>{let i=n.data;switch(i.type){case"inv":{let u=e[i.name];if(!u)throw new Error(`Function not loaded: ${i.name}`);try{let c=await Promise.resolve(u(...i.args||[]));l({type:"invr",id:i.id,result:c})}catch(c){console.error("An exception was thrown as a result of invoking function",i.name,"error:",c.message),l({type:"invr",id:i.id,error:c.message})}}break;case"sysr":{let u=i.id,c=p.get(u);if(!c)throw Error("Invalid request id");p.delete(u),i.error?c.reject(new Error(i.error)):c.resolve(i.result)}break}})().catch(console.error)}),l({type:"manifest",manifest:t}))}function T(e){let t=atob(e),o=t.length,n=new Uint8Array(o);for(let i=0;i<o;i++)n[i]=t.charCodeAt(i);return n}function h(e){typeof e=="string"&&(e=new TextEncoder().encode(e));let t="",o=e.byteLength;for(let n=0;n<o;n++)t+=String.fromCharCode(e[n]);return btoa(t)}async function k(e,t){if(typeof e!="string"){let o=new Uint8Array(await e.arrayBuffer()),n=o.length>0?h(o):void 0;t={method:e.method,headers:Object.fromEntries(e.headers.entries()),base64Body:n},e=e.url}return syscall("sandboxFetch.fetch",e,t)}globalThis.nativeFetch=globalThis.fetch;function S(){globalThis.fetch=async function(e,t){let o=t&&t.body?h(new Uint8Array(await new Response(t.body).arrayBuffer())):void 0,n=await k(e,t&&{method:t.method,headers:t.headers,base64Body:o});return new Response(n.base64Body?T(n.base64Body):null,{status:n.status,headers:n.headers})}}d&&S();var a={};x(a,{confirm:()=>ae,copyToClipboard:()=>Pe,deleteLine:()=>he,dispatch:()=>ie,downloadFile:()=>Y,filterBox:()=>J,flashNotification:()=>z,fold:()=>le,foldAll:()=>de,getCurrentPage:()=>R,getCurrentPageMeta:()=>U,getCursor:()=>E,getSelection:()=>O,getText:()=>L,getUiOption:()=>ce,goHistory:()=>$,hidePanel:()=>Z,insertAtCursor:()=>ne,insertAtPos:()=>ee,moveCursor:()=>re,moveCursorToLine:()=>oe,moveLineDown:()=>be,moveLineUp:()=>ve,navigate:()=>q,newWindow:()=>V,openCommandPalette:()=>N,openPageNavigator:()=>_,openSearchPanel:()=>xe,openUrl:()=>I,prompt:()=>se,rebuildEditorState:()=>B,redo:()=>ye,reloadConfigAndCommands:()=>W,reloadPage:()=>K,reloadUI:()=>Q,replaceRange:()=>te,save:()=>G,setSelection:()=>D,setText:()=>j,setUiOption:()=>ue,showPanel:()=>X,toggleFold:()=>pe,undo:()=>fe,unfold:()=>me,unfoldAll:()=>ge,uploadFile:()=>H,vimEx:()=>we});typeof self>"u"&&(self={syscall:()=>{throw new Error("Not implemented here")}});function r(e,...t){return globalThis.syscall(e,...t)}function R(){return r("editor.getCurrentPage")}function U(){return r("editor.getCurrentPageMeta")}function L(){return r("editor.getText")}function j(e,t=!1){return r("editor.setText",e,t)}function E(){return r("editor.getCursor")}function O(){return r("editor.getSelection")}function D(e,t){return r("editor.setSelection",e,t)}function G(){return r("editor.save")}function q(e,t=!1,o=!1){return r("editor.navigate",e,t,o)}function _(e="page"){return r("editor.openPageNavigator",e)}function N(){return r("editor.openCommandPalette")}function K(){return r("editor.reloadPage")}function Q(){return r("editor.reloadUI")}function B(){return r("editor.rebuildEditorState")}function W(){return r("editor.reloadConfigAndCommands")}function I(e,t=!1){return r("editor.openUrl",e,t)}function V(){return r("editor.newWindow")}function $(e){return r("editor.goHistory",e)}function Y(e,t){return r("editor.downloadFile",e,t)}function H(e,t){return r("editor.uploadFile",e,t)}function z(e,t="info"){return r("editor.flashNotification",e,t)}function J(e,t,o="",n=""){return r("editor.filterBox",e,t,o,n)}function X(e,t,o,n=""){return r("editor.showPanel",e,t,o,n)}function Z(e){return r("editor.hidePanel",e)}function ee(e,t){return r("editor.insertAtPos",e,t)}function te(e,t,o){return r("editor.replaceRange",e,t,o)}function re(e,t=!1){return r("editor.moveCursor",e,t)}function oe(e,t=1,o=!1){return r("editor.moveCursorToLine",e,t,o)}function ne(e,t=!1){return r("editor.insertAtCursor",e,t)}function ie(e){return r("editor.dispatch",e)}function se(e,t=""){return r("editor.prompt",e,t)}function ae(e){return r("editor.confirm",e)}function ce(e){return r("editor.getUiOption",e)}function ue(e,t){return r("editor.setUiOption",e,t)}function le(){return r("editor.fold")}function me(){return r("editor.unfold")}function pe(){return r("editor.toggleFold")}function de(){return r("editor.foldAll")}function ge(){return r("editor.unfoldAll")}function fe(){return r("editor.undo")}function ye(){return r("editor.redo")}function xe(){return r("editor.openSearchPanel")}function Pe(e){return r("editor.copyToClipboard",e)}function he(){return r("editor.deleteLine")}function ve(){return r("editor.moveLineUp")}function be(){return r("editor.moveLineDown")}function we(e){return r("editor.vimEx",e)}var s={};x(s,{run:()=>Ee});function Ee(e,t){return r("shell.run",e,t)}var f=async()=>{await C()!=""&&(await g("Found existed Git setup, do you want to continue? This will delete old git config? (Yes/No)"),await Be());let t=await a.prompt("Project URL:");if(!t)return;let o=await a.prompt("Access token (For GitLab: username:access_token):");if(!o)return;let n=await a.prompt("Your name:");if(!n)return;let i=await a.prompt("Your email:");if(!i)return;await g("Your content in git repo will overide current space, continue? (Yes/No)");let u=t.split("/");u[2]=`${o}@${u[2]}`;let c={url:u.join("/"),name:n,email:i};await Ke(c)},y=async()=>{console.log("Starting sync with git repo"),await Qe(),console.log("Pulling change(s) from repo"),await s.run("git",["pull"]),console.log("Pushing change(s) to repo"),await s.run("git",["push"]),console.log("Done with sync task")},v=async()=>{let e=await a.prompt("Enter new token (For GitLab: username:access_token):");if(!e)return;let t=await C();if(t!=""){let o=t.split("/");o[2]=o[2].replace(/^.*@/,`${e}@`);let n=o.join("/");if(n.trim()==""){await a.flashNotification("Failed to replace token");return}console.log("Updating git remote"),await s.run("git",["remote","set-url","origin",n]),await a.flashNotification("Replaced token successfully!")}else return},b=async()=>{await g("Are you sure to continue? (Yes/No)"),console.log("Deleting old .git folder"),await s.run("rm",["-rf",".git"]),console.log("Trigger git clone"),await f()},w=async()=>{new Date().getMinutes()%5===0&&await y()},Ke=async e=>{await a.flashNotification("Cloning your git repo, it might take some time.");try{await s.run("git",["clone",e.url,"_sb_git"])}catch{console.error("Failed to clone repository, please check your details"),await a.flashNotification("Failed to clone repository, please check your details");return}console.log("Creating .gitignore file"),await s.run("echo",[".silverbullet.db*",">",".gitignore"]),await s.run("echo",["_plug/",">>",".gitignore"]),await s.run("echo",["Library/",">>",".gitignore"]),console.log("Moving repo content to space"),await s.run("bash",["-c","mv -f _sb_git/{.,}* . 2> /dev/null; true"]),await s.run("rm",["-rf","_sb_git"]),await s.run("git",["config","user.name",e.name]),await s.run("git",["config","user.email",e.email]),await a.flashNotification("Done. Now just wait for sync to kick in to get all the content.")},C=async()=>{await a.flashNotification("Checking git exists or not...");let e=(await s.run("git",["remote","get-url","origin"])).stdout.trim();return e==""?(console.error("Git repo does not exist, please make sure you have set it up"),await a.flashNotification("Git repo does not exist, please make sure you have set it up"),""):e},Qe=async e=>{e||(e=`bot - auto commit ${Date.now()}`),console.log(`Commit your space to git with message: ${e}`),await s.run("git",["add","./*"]);try{await s.run("git",["commit","-a","-m",e])}catch{console.log("Failed to commit")}console.log("Done")},Be=async()=>{console.log("Removing .git"),await s.run("rm",["-rf",".git"]),await a.flashNotification("Removed Git")},g=async e=>{let t=await a.prompt(e);if(t?.toLowerCase()!="yes"||t?.toLowerCase()!="y"){console.log("User cancelled!"),await a.flashNotification("User cancelled!");return}};var F={gitCloneCmd:f,syncFromGitCmd:y,replaceTokenCmd:v,changeGitRepoCmd:b,scheduleCommitCmd:w},A={name:"sb_git",requiredPermissions:["shell"],functions:{gitCloneCmd:{path:"sb_git.ts:gitClone",command:{name:"Git: Setup git repository"}},syncFromGitCmd:{path:"sb_git.ts:sync",command:{name:"Git: Sync with git repository"}},replaceTokenCmd:{path:"sb_git.ts:replaceToken",command:{name:"Git: Replace token"}},changeGitRepoCmd:{path:"sb_git.ts:changeGitRepo",command:{name:"Git: Change git repo"}},scheduleCommitCmd:{path:"sb_git.ts:scheduleCommit",env:"server",cron:"* * * * *"}},assets:{}},At={manifest:A,functionMapping:F};P(F,A,self.postMessage);export{At as plug};
