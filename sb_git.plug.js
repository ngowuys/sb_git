var M=Object.defineProperty;var y=(e,r)=>{for(var o in r)M(e,o,{get:r[o],enumerable:!0})};var l=e=>{throw new Error("Not initialized yet")},d=typeof window>"u"&&typeof globalThis.WebSocketPair>"u";typeof Deno>"u"&&(self.Deno={args:[],build:{arch:"x86_64"},env:{get(){}}});var p=new Map,m=0;d&&(globalThis.syscall=async(e,...r)=>await new Promise((o,n)=>{m++,p.set(m,{resolve:o,reject:n}),l({type:"sys",id:m,name:e,args:r})}));function x(e,r,o){d&&(l=o,self.addEventListener("message",n=>{(async()=>{let i=n.data;switch(i.type){case"inv":{let u=e[i.name];if(!u)throw new Error(`Function not loaded: ${i.name}`);try{let c=await Promise.resolve(u(...i.args||[]));l({type:"invr",id:i.id,result:c})}catch(c){console.error("An exception was thrown as a result of invoking function",i.name,"error:",c.message),l({type:"invr",id:i.id,error:c.message})}}break;case"sysr":{let u=i.id,c=p.get(u);if(!c)throw Error("Invalid request id");p.delete(u),i.error?c.reject(new Error(i.error)):c.resolve(i.result)}break}})().catch(console.error)}),l({type:"manifest",manifest:r}))}function T(e){let r=atob(e),o=r.length,n=new Uint8Array(o);for(let i=0;i<o;i++)n[i]=r.charCodeAt(i);return n}function P(e){typeof e=="string"&&(e=new TextEncoder().encode(e));let r="",o=e.byteLength;for(let n=0;n<o;n++)r+=String.fromCharCode(e[n]);return btoa(r)}async function k(e,r){if(typeof e!="string"){let o=new Uint8Array(await e.arrayBuffer()),n=o.length>0?P(o):void 0;r={method:e.method,headers:Object.fromEntries(e.headers.entries()),base64Body:n},e=e.url}return syscall("sandboxFetch.fetch",e,r)}globalThis.nativeFetch=globalThis.fetch;function S(){globalThis.fetch=async function(e,r){let o=r&&r.body?P(new Uint8Array(await new Response(r.body).arrayBuffer())):void 0,n=await k(e,r&&{method:r.method,headers:r.headers,base64Body:o});return new Response(n.base64Body?T(n.base64Body):null,{status:n.status,headers:n.headers})}}d&&S();var s={};y(s,{confirm:()=>ae,copyToClipboard:()=>Pe,deleteLine:()=>he,dispatch:()=>ie,downloadFile:()=>Y,filterBox:()=>J,flashNotification:()=>z,fold:()=>le,foldAll:()=>de,getCurrentPage:()=>R,getCurrentPageMeta:()=>U,getCursor:()=>E,getSelection:()=>O,getText:()=>L,getUiOption:()=>ce,goHistory:()=>$,hidePanel:()=>Z,insertAtCursor:()=>ne,insertAtPos:()=>ee,moveCursor:()=>re,moveCursorToLine:()=>oe,moveLineDown:()=>be,moveLineUp:()=>ve,navigate:()=>q,newWindow:()=>V,openCommandPalette:()=>N,openPageNavigator:()=>_,openSearchPanel:()=>xe,openUrl:()=>I,prompt:()=>se,rebuildEditorState:()=>B,redo:()=>ye,reloadConfigAndCommands:()=>W,reloadPage:()=>K,reloadUI:()=>Q,replaceRange:()=>te,save:()=>D,setSelection:()=>G,setText:()=>j,setUiOption:()=>ue,showPanel:()=>X,toggleFold:()=>pe,undo:()=>fe,unfold:()=>me,unfoldAll:()=>ge,uploadFile:()=>H,vimEx:()=>we});typeof self>"u"&&(self={syscall:()=>{throw new Error("Not implemented here")}});function t(e,...r){return globalThis.syscall(e,...r)}function R(){return t("editor.getCurrentPage")}function U(){return t("editor.getCurrentPageMeta")}function L(){return t("editor.getText")}function j(e,r=!1){return t("editor.setText",e,r)}function E(){return t("editor.getCursor")}function O(){return t("editor.getSelection")}function G(e,r){return t("editor.setSelection",e,r)}function D(){return t("editor.save")}function q(e,r=!1,o=!1){return t("editor.navigate",e,r,o)}function _(e="page"){return t("editor.openPageNavigator",e)}function N(){return t("editor.openCommandPalette")}function K(){return t("editor.reloadPage")}function Q(){return t("editor.reloadUI")}function B(){return t("editor.rebuildEditorState")}function W(){return t("editor.reloadConfigAndCommands")}function I(e,r=!1){return t("editor.openUrl",e,r)}function V(){return t("editor.newWindow")}function $(e){return t("editor.goHistory",e)}function Y(e,r){return t("editor.downloadFile",e,r)}function H(e,r){return t("editor.uploadFile",e,r)}function z(e,r="info"){return t("editor.flashNotification",e,r)}function J(e,r,o="",n=""){return t("editor.filterBox",e,r,o,n)}function X(e,r,o,n=""){return t("editor.showPanel",e,r,o,n)}function Z(e){return t("editor.hidePanel",e)}function ee(e,r){return t("editor.insertAtPos",e,r)}function te(e,r,o){return t("editor.replaceRange",e,r,o)}function re(e,r=!1){return t("editor.moveCursor",e,r)}function oe(e,r=1,o=!1){return t("editor.moveCursorToLine",e,r,o)}function ne(e,r=!1){return t("editor.insertAtCursor",e,r)}function ie(e){return t("editor.dispatch",e)}function se(e,r=""){return t("editor.prompt",e,r)}function ae(e){return t("editor.confirm",e)}function ce(e){return t("editor.getUiOption",e)}function ue(e,r){return t("editor.setUiOption",e,r)}function le(){return t("editor.fold")}function me(){return t("editor.unfold")}function pe(){return t("editor.toggleFold")}function de(){return t("editor.foldAll")}function ge(){return t("editor.unfoldAll")}function fe(){return t("editor.undo")}function ye(){return t("editor.redo")}function xe(){return t("editor.openSearchPanel")}function Pe(e){return t("editor.copyToClipboard",e)}function he(){return t("editor.deleteLine")}function ve(){return t("editor.moveLineUp")}function be(){return t("editor.moveLineDown")}function we(e){return t("editor.vimEx",e)}var a={};y(a,{run:()=>Ee});function Ee(e,r){return t("shell.run",e,r)}var g=async()=>{if(await w()!=""){let c=await s.prompt("Found existed Git setup, do you want to continue? This will delete old git config? (Yes/No)");if(c?.toLowerCase()=="yes"||c?.toLowerCase()=="y")await Be();else return}let r=await s.prompt("Project URL:");if(!r)return;let o=await s.prompt("Access token (For GitLab: username:access_token):");if(!o)return;let n=await s.prompt("Your name:");if(!n)return;let i=await s.prompt("Your email:");if(!i)return;let u=await s.prompt("Your content in git repo will overide current space, continue? (Yes/No)");if(u?.toLowerCase()=="yes"||u?.toLowerCase()=="y"){let c=r.split("/");c[2]=`${o}@${c[2]}`;let A={url:c.join("/"),name:n,email:i};await Ke(A)}else{s.flashNotification("User cancelled.");return}},f=async()=>{console.log("Starting sync with git repo"),await Qe(),console.log("Pulling change(s) from repo"),await a.run("git",["pull"]),console.log("Pushing change(s) to repo"),await a.run("git",["push"]),console.log("Done with sync task")},h=async()=>{let e=await s.prompt("Enter new token (For GitLab: username:access_token):");if(!e)return;let r=await w();if(r!=""){let o=r.split("/");o[2]=o[2].replace(/^.*@/,`${e}@`);let n=o.join("/");if(n.trim()==""){await s.flashNotification("Failed to replace token");return}console.log("Updating git remote"),await a.run("git",["remote","set-url","origin",n]),await s.flashNotification("Replaced token successfully!")}else return},v=async()=>{console.log("Deleting old .git folder"),await a.run("rm",["-rf",".git"]),console.log("Trigger git clone"),await g()},b=async()=>{new Date().getMinutes()%5===0&&await f()},Ke=async e=>{await s.flashNotification("Cloning your git repo, it might take some time.");try{await a.run("git",["clone",e.url,"_sb_git"])}catch{console.error("Failed to clone repository, please check your details"),await s.flashNotification("Failed to clone repository, please check your details");return}console.log("Creating .gitignore file"),await a.run("echo",[".silverbullet.db*",">",".gitignore"]),await a.run("echo",["_plug/",">>",".gitignore"]),await a.run("echo",["Library/",">>",".gitignore"]),console.log("Moving repo content to space"),await a.run("bash",["-c","mv -f _sb_git/{.,}* . 2> /dev/null; true"]),await a.run("rm",["-rf","_sb_git"]),await a.run("git",["config","user.name",e.name]),await a.run("git",["config","user.email",e.email]),await s.flashNotification("Done. Now just wait for sync to kick in to get all the content.")},w=async()=>{await s.flashNotification("Checking git exists or not...");let e=(await a.run("git",["remote","get-url","origin"])).stdout.trim();return e==""?(console.error("Git repo does not exist, please make sure you have set it up"),await s.flashNotification("Git repo does not exist, please make sure you have set it up"),""):e},Qe=async e=>{e||(e=`bot - auto commit ${Date.now()}`),console.log(`Commit your space to git with message: ${e}`),await a.run("git",["add","./*"]);try{await a.run("git",["commit","-a","-m",e])}catch{console.log("Failed to commit")}console.log("Done")},Be=async()=>{console.log("Removing .git"),await a.run("rm",["-rf",".git"]),await s.flashNotification("Removed Git")};var C={gitCloneCmd:g,syncFromGitCmd:f,replaceTokenCmd:h,changeGitRepoCmd:v,scheduleCommitCmd:b},F={name:"sb_git",requiredPermissions:["shell"],functions:{gitCloneCmd:{path:"sb_git.ts:gitClone",command:{name:"Git: Clone repo"}},syncFromGitCmd:{path:"sb_git.ts:sync",command:{name:"Git: Sync from Git"}},replaceTokenCmd:{path:"sb_git.ts:replaceToken",command:{name:"Git: Replace token"}},changeGitRepoCmd:{path:"sb_git.ts:changeGitRepo",command:{name:"Git: Change git repo"}},scheduleCommitCmd:{path:"sb_git.ts:scheduleCommit",env:"server",cron:"* * * * *"}},assets:{}},At={manifest:F,functionMapping:C};x(C,F,self.postMessage);export{At as plug};
